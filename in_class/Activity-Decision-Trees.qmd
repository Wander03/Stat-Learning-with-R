---
title: "Classification: Decision Trees"
author: "Andrew Kerr"
format: 
  html:
    code-fold: true
    code-line-numbers: true
    code-tools: true
    self-contained: true
editor: visual
execute:
  message: false
  error: true
---

## Setup

Declare your libraries:

```{r}
#| label: libraries-r
#| include: false
library(tidyverse)
library(tidymodels)
library(glmnet)
library(discrim)
library(rpart)
library(rpart.plot)
```

# Setup

Today's data concerns strains of cannabis, which have the types of `sativa`, `indica`, or `hybrid`:

```{r}
#| label: data-read-clean

cann <- read_csv("https://www.dropbox.com/s/s2a1uoiegitupjc/cannabis_full.csv?dl=1")

cann_clean <- cann %>%
  mutate(
    Type = factor(Type)
  ) %>%
  drop_na(-Strain, -Effects, -Flavor)

cann_cvs <- vfold_cv(cann_clean, v = 5)

cann_recipe <- recipe(Type ~ ., 
                     data = cann_clean) %>%
  step_rm(Strain, Effects, Flavor)
```

## Logistic Regression

Does not work:

```{r}
#| error: true
#| label: logistic

logit_mod <- logistic_reg() %>%
  set_engine("glm") %>%
  set_mode("classification")

logit_wflow <- workflow() %>%
  add_recipe(cann_recipe) %>%
  add_model(logit_mod)

logit_fit <- logit_wflow %>%
  fit_resamples(cann_cvs)

```

## Discriminant Analysis

Does work:

```{r}
#| label: lda
#| error: true

lda_mod <- discrim_linear() %>%
  set_engine("MASS") %>%
  set_mode("classification")

lda_wflow <- workflow() %>%
  add_recipe(cann_recipe) %>%
  add_model(lda_mod)

lda_fit <- lda_wflow %>%
  fit_resamples(cann_cvs)

```

## KNN

Does work:

```{r}
#| label: knn

knn_mod <- nearest_neighbor(neighbors = 5) %>%
  set_engine("kknn") %>%
  set_mode("classification")

knn_wflow <- workflow() %>%
  add_recipe(cann_recipe) %>%
  add_model(knn_mod)

knn_fit <- knn_wflow %>%
  fit_resamples(cann_cvs)

```

```{r}
#| label: knn-metrics

knn_fit <- knn_wflow %>%
  fit_resamples(cann_cvs,
                metrics = metric_set(accuracy, roc_auc, precision, recall))

knn_fit %>% collect_metrics()
```

## Decision Trees

```{r}
#| label: energetic

cann_clean %>%
  ggplot(aes(x = factor(Energetic), fill = factor(Type))) +
  geom_bar(position = "fill") + 
  labs(x = "Energetic", 
       y = "Proportion of Observations", 
       fill = "Marijuana Type")
```

```{r}
#| label: pineapple

cann_clean %>%
  ggplot(mapping = aes(x = factor(Pineapple), fill = Type)) +
  geom_bar(position = "fill") + 
    labs(x = "Pineapple Flavor", 
       y = "Proportion of Observations", 
       fill = "Marijuana Type")
```

```{r}
#| label: decision-tree-mod-workflow

# cann_clean <- cann %>%
#   mutate(
#     Type = character(Type)
#   ) %>%
#   drop_na(-Strain, -Effects, -Flavor)
# 
# cann_recipe <- recipe(Type ~ ., 
#                      data = cann_clean) %>%
#   step_rm(Strain, Effects, Flavor)

tree_mod <- decision_tree() %>%
  set_engine("rpart") %>%
  set_mode("classification")

tree_wflow <- workflow() %>%
  add_model(tree_mod) %>% 
  add_recipe(cann_recipe)
```

```{r}
#| label: decision-tree-fit-cv

tree_fit <- tree_wflow %>%
  fit_resamples(cann_cvs,
                metrics = metric_set(accuracy, roc_auc, precision, recall)
                )

tree_fit %>% collect_metrics()
```

```{r}
#| label: decision-fit

tree_fit_1 <- tree_wflow %>%
  fit(cann_clean)

tree_fit_1$fit
```

#### Plot of Tree

```{r}
#| label: decision-tree-plot
tree_fitted <- tree_fit_1 %>% 
  pull_workflow_fit()

rpart.plot(tree_fitted$fit)
```

**Note you need to install the rpart.plot package for this code to work!**

#### Tuning (Cost, Depth, Minimum Leaf)

```{r}
#| label: tune-tree-complexity-depth-min-leaf

tree_grid <- grid_regular(cost_complexity(),
                          tree_depth(),
                          min_n(), 
                          levels = 2)

tree_mod <- decision_tree(cost_complexity = tune(),
                          tree_depth = tune(),
                          min_n = tune()) %>%
  set_engine("rpart") %>%
  set_mode("classification")

tree_wflow <- workflow() %>%
  add_model(tree_mod) %>% 
  add_recipe(cann_recipe)

tree_grid_search <-
  tune_grid(
    tree_wflow,
    resamples = cann_cvs,
    grid = tree_grid
  )

tuning_metrics <- tree_grid_search %>% collect_metrics()
```

```{r}
#| label: tune-tree-complexity-depth-min-leaf-accuracy

tuning_metrics %>%
  filter(.metric == "accuracy") %>%
  slice_max(mean)
```

```{r}
#| label: tune-tree-complexity-depth-min-leaf-roc

tuning_metrics %>%
  filter(.metric == "roc_auc") %>%
  slice_max(mean)
```

## Your Turn

#### Fit a final model with the selected hyperparameters

```{r}
tree_mod <- decision_tree(cost_complexity = 1e-10,
                          tree_depth = 15,
                          min_n = 40) %>%
  set_engine("rpart") %>%
  set_mode("classification")

tree_wflow <- workflow() %>%
  add_model(tree_mod) %>% 
  add_recipe(cann_recipe)

tree_fit <- tree_wflow %>%
  fit(cann_clean)
```

#### Report some metrics for the final model

```{r}

```

#### Plot the tree (look at the previously provided code)

```{r}
tree_fitted <- tree_fit %>% 
  pull_workflow_fit()

rpart.plot(tree_fitted$fit)
```

#### Interpret the first two levels of splits in plain English.
